AWSTemplateFormatVersion: '2010-09-09'
Description: AMIgo, an AMI bakery
Parameters:
  Stage:
    Description: Stage name
    Type: String
    Default: PROD
  VPC:
    Description: Virtual Private Cloud to run EC2 instances within
    Type: AWS::EC2::VPC::Id
  PublicSubnets:
    Description: Subnets to run load balancer within
    Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnets:
    Description: Subnets to run the ASG and instances within
    Type: List<AWS::EC2::Subnet::Id>
  AMI:
    Description: AMI ID
    Type: String
    Default: ami-6b50e218
  InstanceType:
    Description: EC2 instance type
    Type: String
  PackerVersion:
    Description: What version of Packer to install
    Type: String
  PackerInstanceProfile:
    Description: Instance profile given to instances created by Packer #find this in the PackerUser-PackerRole in IAM
    Type: String
  TLSCert:
    Type: String
    Description: ARN of a TLS certificate to install on the load balancer
  AnghammaradTopicArn:
    Type: String
    Description: Anghammarad sns notifications topic arn
  DistributionBucketName:
    Description: SSM parameter containing the S3 bucket name holding distribution artifacts
    Type: AWS::SSM::Parameter::Value<String>
    Default: /account/services/artifact.bucket

Mappings:
  Config:
    CODE:
      LowerCaseName: code
    PROD:
      LowerCaseName: prod

Resources:
  RootRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Tags:
        - Key: App
          Value: amigo
        - Key: Stack
          Value: deploy
        - Key: Stage
          Value: !Ref 'Stage'
  AmigoAppPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: amigo-app
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - dynamodb:ListTables
          Resource: '*'

        # AMIgo uses DynamoDb as a data store.
        # The permissions are quite wide, mainly because AMIgo creates tables as well as reading/writing data.
        # See `app/data/Dynamo.scala`
        - Effect: Allow
          Action:
          - dynamodb:*
          Resource: !Sub 'arn:aws:dynamodb:*:*:table/amigo-${Stage}-*'

        # Permissions to obtain configuration via configuration-magic
        # See https://github.com/guardian/configuration-magic/blob/master/core/src/main/scala/com/gu/cm/DynamoDbConfigurationSource.scala
        - Effect: Allow
          Action:
          - dynamodb:DescribeTable
          - dynamodb:GetItem
          Resource: arn:aws:dynamodb:*:*:table/config-deploy

        # Permissions to support encrypted bakes
        # See https://github.com/guardian/amigo/pull/164
        - Effect: Allow
          Action:
          - sns:ListTopics
          Resource: '*'

        # Permissions to trigger AMI deletion
        # See https://github.com/guardian/amigo/pull/193
        - Effect: Allow
          Action:
          - sns:*
          Resource: !Sub 'arn:aws:sns:*:*:amigo-${Stage}-notify'
        - Effect: Allow
          Action:
          - sns:*
          Resource: !Sub 'arn:aws:sns:*:*:amigo-${Stage}-housekeeping-notify'

        # Permissions to enable Anghammarad notifications
        # See https://github.com/guardian/cdk/pull/626
        - Effect: Allow
          Action:
            - sns:Publish
          Resource: !Ref AnghammaradTopicArn

        # Allow us to allow other accounts to retrieve the ImageCopier lambda artifact
        - Effect: Allow
          Action:
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          Resource: !Join [ "", [ "arn:aws:s3::*:", !Ref DistributionBucketName ] ]

        # Permissions to enable listing of installed packages created during a bake
        # See https://github.com/guardian/amigo/pull/395
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            - !Sub 'arn:aws:s3:::${AmigoDataBucket}/*'

        # See https://github.com/guardian/amigo/pull/526
        - Effect: Allow
          Action:
            - iam:GetInstanceProfile
          Resource: !Ref PackerInstanceProfile
      Roles:
      - !Ref 'RootRole'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'RootRole'
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !Ref 'LoadBalancerSecurityGroup'
      Subnets: !Ref 'PublicSubnets'
      CrossZone: true
      Listeners:
      - Protocol: HTTP
        LoadBalancerPort: '80'
        InstancePort: '9000'
      - Protocol: HTTPS
        LoadBalancerPort: '443'
        InstancePort: '9000'
        SSLCertificateId: !Ref 'TLSCert'
      HealthCheck:
        Target: HTTP:9000/healthcheck
        Timeout: '5'
        Interval: '10'
        UnhealthyThreshold: '2'
        HealthyThreshold: '2'
      Tags:
        - Key: App
          Value: amigo
        - Key: Stack
          Value: deploy
        - Key: Stage
          Value: !Ref 'Stage'
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'PrivateSubnets'
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '2'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LoadBalancerNames:
      - !Ref 'LoadBalancer'
      Tags:
      - Key: App
        PropagateAtLaunch: 'true'
        Value: amigo
      - Key: Stack
        PropagateAtLaunch: 'true'
        Value: deploy
      - Key: Stage
        PropagateAtLaunch: 'true'
        Value: !Ref 'Stage'
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'AMI'
      AssociatePublicIpAddress: false
      SecurityGroups:
      - !Ref 'ApplicationSecurityGroup'
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ev

          wget -P /tmp https://releases.hashicorp.com/packer/${PackerVersion}/packer_${PackerVersion}_linux_arm64.zip
          mkdir /opt/packer
          unzip -d /opt/packer /tmp/packer_*_linux_arm64.zip
          echo 'export PATH=${!PATH}:/opt/packer' > /etc/profile.d/packer.sh

          wget -P /tmp https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_arm64/session-manager-plugin.deb
          dpkg -i /tmp/session-manager-plugin.deb

          aws --region eu-west-1 s3 cp s3://${DistributionBucketName}/deploy/${Stage}/amigo/amigo_1.0-latest_all.deb /tmp/amigo.deb
          dpkg -i /tmp/amigo.deb

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Guardian IP range has access to the load balancer on port
        80
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 77.91.248.0/21
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 77.91.248.0/21
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: amigo
        - Key: Stack
          Value: deploy
        - Key: Stage
          Value: !Ref 'Stage'
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH and HTTP
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        CidrIp: 10.249.0.0/16
      - IpProtocol: tcp
        FromPort: '9000'
        ToPort: '9000'
        SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      Tags:
        - Key: App
          Value: amigo
        - Key: Stack
          Value: deploy
        - Key: Stage
          Value: !Ref 'Stage'
  AmigoDataBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName:
        Fn::Sub:
          - amigo-data-${LowerCaseStage}
          - LowerCaseStage: !FindInMap [ Config, Ref: Stage, LowerCaseName ]
      Tags:
        - Key: App
          Value: amigo
        - Key: Stack
          Value: deploy
        - Key: Stage
          Value: !Ref 'Stage'
  PackerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'amigo-packer-${Stage}'
      GroupDescription: Security group for instances created by Packer
      VpcId: !Ref 'VPC'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: App
          Value: amigo
        - Key: Stack
          Value: deploy
        - Key: Stage
          Value: !Ref 'Stage'
